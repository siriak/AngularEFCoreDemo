// <auto-generated />
using System;
using AngularEFCoreDemo.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AngularEFCoreDemo.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AngularEFCoreDemo.Models.AuthorityEntry", b =>
                {
                    b.Property<int>("AuthorityEntryId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BookEditionId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Order");

                    b.Property<int>("PersonId");

                    b.HasKey("AuthorityEntryId");

                    b.HasIndex("BookEditionId");

                    b.HasIndex("PersonId");

                    b.ToTable("AuthorityEntries");
                });

            modelBuilder.Entity("AngularEFCoreDemo.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BookEditionId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("SectionId");

                    b.HasKey("BookId");

                    b.HasIndex("BookEditionId");

                    b.HasIndex("SectionId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("AngularEFCoreDemo.Models.BookEdition", b =>
                {
                    b.Property<int>("BookEditionId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title");

                    b.HasKey("BookEditionId");

                    b.ToTable("BookEditions");
                });

            modelBuilder.Entity("AngularEFCoreDemo.Models.BookTakeEvent", b =>
                {
                    b.Property<int>("BookTakeEventId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActualReturnDate");

                    b.Property<int>("BookId");

                    b.Property<DateTime>("ExpectedReturnDate");

                    b.Property<DateTime>("GiveDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PersonId");

                    b.Property<int>("TicketId");

                    b.HasKey("BookTakeEventId");

                    b.HasIndex("BookId");

                    b.HasIndex("PersonId");

                    b.HasIndex("TicketId");

                    b.ToTable("BookTakeEvents");
                });

            modelBuilder.Entity("AngularEFCoreDemo.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BirthDate");

                    b.Property<DateTime>("DeathDate");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<byte>("Role");

                    b.HasKey("PersonId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("AngularEFCoreDemo.Models.ReaderTicket", b =>
                {
                    b.Property<int>("ReaderTicketId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ReaderId");

                    b.HasKey("ReaderTicketId");

                    b.HasIndex("ReaderId");

                    b.ToTable("ReaderTickets");
                });

            modelBuilder.Entity("AngularEFCoreDemo.Models.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Building");

                    b.Property<int>("Cabinet");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Room");

                    b.Property<int>("Shelf");

                    b.HasKey("SectionId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("AngularEFCoreDemo.Models.AuthorityEntry", b =>
                {
                    b.HasOne("AngularEFCoreDemo.Models.BookEdition", "BookEdition")
                        .WithMany()
                        .HasForeignKey("BookEditionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AngularEFCoreDemo.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AngularEFCoreDemo.Models.Book", b =>
                {
                    b.HasOne("AngularEFCoreDemo.Models.BookEdition", "BookEdition")
                        .WithMany()
                        .HasForeignKey("BookEditionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AngularEFCoreDemo.Models.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AngularEFCoreDemo.Models.BookTakeEvent", b =>
                {
                    b.HasOne("AngularEFCoreDemo.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AngularEFCoreDemo.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AngularEFCoreDemo.Models.ReaderTicket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AngularEFCoreDemo.Models.ReaderTicket", b =>
                {
                    b.HasOne("AngularEFCoreDemo.Models.Person", "Reader")
                        .WithMany()
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
